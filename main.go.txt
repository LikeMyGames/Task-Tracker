package main

import (
	"html/template"
	"log"
	"net/http"
)

type PageLayout struct {
	Title   string
	Content []string
}

func main() {
	// Hello world, the web server
	// handler := func(w http.ResponseWriter, req *http.Request) {
	// 	tmpl := template.Must(template.ParseFiles("temp.html"))
	// 	data := PageLayout{
	// 		Title:   "Welcome to a Go Powered Todo List",
	// 		Content: []string{"This is a temp layout", ", hello, world"},
	// 	}
	// 	tmpl.Execute(w, data)
	// }

	http.HandleFunc("/", handler)
	log.Println("Starting server on http://localhost:3000")
	log.Fatal(http.ListenAndServe(":3000", nil))
}

func handler(w http.ResponseWriter, req *http.Request) {
	tmpl := template.Must(template.ParseFiles("temp.html"))
	data := PageLayout{
		Title:   "Welcome to a Go Powered Todo List",
		Content: []string{"This is a temp layout", ", hello, world"},
	}
	tmpl.Execute(w, data)
	log.Println("Request for ", req.URL)
}

// // func main() {
// // 	s := `
// // 	<p>Links:</p>
// // 	<ul>
// // 	<li><a href="foo">Foo</a>
// // 	<li><a href="/bar/baz">BarBaz</a>
// // 	</ul>`

// // 	doc, err := html.Parse(strings.NewReader(s))
// // 	if err != nil {
// // 		log.Fatal(err)
// // 	}
// // 	for n := range doc.Descendants() {
// // 		if n.Type == html.ElementNode && n.DataAtom == atom.A {
// // 			for _, a := range n.Attr {
// // 				if a.Key == "style" {
// // 					fmt.Println(a.Val)
// // 					break
// // 				}
// // 			}
// // 		}
// // 	}

// // }

// func main() {

// 	s := `
// 	<p>Links:</p>
// 	<ul>
// 	<li><a href="foo">Foo</a>
// 	<li><a href="/bar/baz">BarBaz</a>
// 	</ul>`

// 	template.Must(template.Parse(s))

//		doc, err := html.Parse(strings.NewReader(s))
//		if err != nil {
//			log.Fatal(err)
//		}
//		fmt.Println(doc)
//	}

// package main

// import (
// 	"html/template"
// 	"log"
// 	"os"
// 	"strings"
// )

// func main() {
// 	const (
// 		master  = `Names:{{block "list" .}}{{"\n"}}{{range .}}{{println "-" .}}{{end}}{{end}}`
// 		overlay = `{{define "list"}} {{join . ", "}}{{end}} `
// 	)
// 	var (
// 		funcs     = template.FuncMap{"join": strings.Join}
// 		guardians = []string{"Gamora", "Groot", "Nebula", "Rocket", "Star-Lord"}
// 	)
// 	masterTmpl, err := template.New("master").Funcs(funcs).Parse(master)
// 	if err != nil {
// 		log.Fatal(err)
// 	}
// 	overlayTmpl, err := template.Must(masterTmpl.Clone()).Parse(overlay)
// 	if err != nil {
// 		log.Fatal(err)
// 	}
// 	if err := masterTmpl.Execute(os.Stdout, guardians); err != nil {
// 		log.Fatal(err)
// 	}
// 	if err := overlayTmpl.Execute(os.Stdout, guardians); err != nil {
// 		log.Fatal(err)
// 	}
// }
